upstream modetwo_app_server{
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  server unix:/srv/mode/DigitalMediaPlatform/mobilemode/modetwo/gunicorn.sock fail_timeout=0;
}

server {

    listen   80;
    server_name ec2-107-20-153-218.compute-1.amazonaws.com;

    client_max_body_size 4G;
    #proxy_connect_timeout 900s;
    #proxy_read_timeout 900s;
    #keepalive 64

    location /static/ {
        alias   /srv/mode/DigitalMediaPlatform/mobilemode/modetwo/static/;
        expires 7d;
    }

    location /finalstatic/ {
        alias   /srv/mode/DigitalMediaPlatform/mobilemode/modetwo/finalstatic/;
        expires 7d;
    }

    location /media/ {
        alias   /srv/mode/DigitalMediaPlatform/mobilemode/modetwo/media/;
    }

   location /socket/ {
       proxy_http_version 1.1;
       proxy_set_header Upgrade $http_upgrade;
       proxy_set_header Connection "upgrade";
       proxy_pass http://unix:/srv/mode/DigitalMediaPlatform/mobilemode/modetwo/modetwo_daphne.sock;
   }

    location / {
        # an HTTP header important enough to have its own Wikipedia entry:
        #   http://en.wikipedia.org/wiki/X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # enable this if and only if you use HTTPS, this helps Rack
        # set the proper protocol for doing redirects:
        # proxy_set_header X-Forwarded-Proto https;

        # pass the Host: header from the client right along so redirects
        # can be set properly within the Rack application
        proxy_set_header Host $http_host;

        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;
        #proxy_read_timeout 3000;

        proxy_http_version 1.1;
        proxy_set_header Connection "";

        proxy_buffers 8 16k;
        proxy_buffer_size 32k;
#       passenger_buffers 8 16k;
#       passenger_buffer_size 32k;
        client_max_body_size 150m;

        # set "proxy_buffering off" *only* for Rainbows! when doing
        # Comet/long-poll stuff.  It's also safe to set if you're
        # using only serving fast clients with Unicorn + nginx.
        # Otherwise you _want_ nginx to buffer responses to slow
        # clients, really.
        # proxy_buffering off;

        proxy_connect_timeout 75s;
        proxy_read_timeout 1200;


        # Try to serve static files from nginx, no point in making an
        # *application* server like Unicorn/Rainbows! serve static files.
        if (!-f $request_filename) {
            proxy_pass http://mode_app_server;
            # enable the below to debug server
            #proxy_pass http://127.0.0.1:8000;
            break;
        }
    }

}
